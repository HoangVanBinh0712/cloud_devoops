Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resources.
    Type: String

  ProjectName:
    Description: An name that will be prefixed to resources.
    Type: String

  DisiredCompacity:
    Description: A number of instances
    Type: String

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our load balance
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-vpc-id"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our hosts from our lb Security group
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-vpc-id"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LBSecGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${EnvironmentName}-web-servers"
      LaunchTemplateData:
        UserData:
          Fn::Base64: |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install nginx -y
            service nginx start

            cat << EOF > /var/www/html/index.html 
            <!DOCTYPE html> 
            <html> 
            <head> 
            <title>lt works! Udagram, Udacity </title> 
            </head> 
            <body>
            <h1>lt works! Udagram, Udacity</h1> 
            <p>This website is hosted on Nginx. </p>
            </body> 
            </html> 
            EOF

            # Reload Nginx to apply changes 
            sudo systemctl restart nginx
        ImageId: ami-07d9b9ddc6cd8dd30
        SecurityGroupIds:
          - !Ref WebServerSecGroup
        InstanceType: t2.micro
        IamInstanceProfile:
          Name: !Ref WebServerInstanceProfile
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'
  WebServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvironmentName}-web-servers"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject*'
                Resource:
                  - !Sub "arn:aws:s3:::binhhv-sec-bucket-name/*"
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref WebServerInstanceRole
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-private-subnets"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      DesiredCapacity: !Ref DisiredCompacity
      MaxSize: '3'
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-vpc-id"
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-public-subnet1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-public-subnet2"
      SecurityGroups:
        - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1